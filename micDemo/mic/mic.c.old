/*
 * mic.c
 *
 *  Created on: Sep 14, 2022
 *      Author: Rohan
 */

// https://users.wpi.edu/~ndemarinis/ece2049/e16/lecture10.html
#include "mic.h"
#include "wisp-base.h"
#include "adpcm.h"

uint8_t *dst = (uint8_t *)AUDIO_START_ADDRESS;
uint8_t start_chunk = TRUE;

void MIC_initialize()
{
    BITSET(PMIC_AMP_DIR, PIN_MIC_AMP_EN); // Set the mic amp enable pin to output

    BITSET(PMIC_AUDIO_SEL1, PIN_MIC_AUDIO); // Set the audio pin to adc input
    BITSET(PMIC_AUDIO_SEL0, PIN_MIC_AUDIO);

    BITSET(P3DIR, BIT0); // Set the led pin to output

    // Set the SMCLK to ~40kHz
    CSCTL0_H = CSKEY >> 8; // Unlock CS registers
    CSCTL2 |= SELA__LFMODCLK;
    CSCTL3 |= DIVA__1;
    CSCTL0_H = 0; // Lock CS registers

    // Set up ADC12
    while (REFCTL0 & REFGENBUSY)
    {
    } // Wait for reference generator to be ready
    REFCTL0 = REFVSEL_2 | REFTCOFF | REFON; // Set reference voltage to 2.5V


    // ADC12CTL0 = ADC12ON | ADC12SHT0_0; // Turn on ADC12, set sample time to 16 ADC12CLK cycles, set multiple sample conversion
    // // ADC12CTL1 = ADC12SHP | ADC12SHS_0;                 // Use sampling timer, sample-and-hold source = ADC12SC bit
    // ADC12CTL1 = ADC12CONSEQ_0 | ADC12SHP | ADC12SSEL1;
    // ADC12CTL2 = ADC12RES_2;                           // 12-bit conversion results
    // ADC12MCTL0 = AUDIO_PIN | ADC12VRSEL_1 | ADC12EOS; // A15 ADC input select; Vref=2.5V

    ADC12CTL0 = ADC12SHT0_2 | ADC12ON | ADC12MSC; // Set sample time to 16 ADC12CLK cycles, set multiple sample conversion
    ADC12CTL1 = ADC12CONSEQ_0;         // Use sampling timer, sample-and-hold source = ADC12SC bit, single channel
    ADC12CTL2 = ADC12RES_2;                       // 12-bit conversion results
    ADC12MCTL0 = AUDIO_PIN | ADC12VRSEL_1;        // A15 ADC input select; Vref=2.5V

    // ADC12IER0 = ADC12IE0; // Enable ADC12IFG.0

    // // Set up Timer A3
    TA3CCR0 = 4; // Set period to ~10kHz
}

void MIC_capture()
{
    // Reset compressor constants
    ADPCM_Init();

    BITSET(PMIC_AMP_OUT, PIN_MIC_AMP_EN); // Enable the mic power

    // Wait for the mic to power up (~170ms)
    // Should enter sleep mode for this delay
    //    Timer_LooseDelay(5400);

    __bic_SR_register(GIE);

    // Enable timer interrupt
    // TA3CCTL0 = CCIE;
    // TA3CCR0 = 1;                  // 1ms period

    // TA3CTL = TASSEL__SMCLK | MC__UP | TACLR; // SMCLK, up mode, clear TAR
    // Set up Timer A3
    // TA3CCTL0 = CCIE;                        // Enable interrupt
    // TA3CTL = TASSEL__ACLK | MC__UP | ID__1; // Set ACLK as source, up mode, divide by 1;

    // Enable ADC
    // ADC12IER0 |= ADC12IE0;
    // ADC12CTL0 |= ADC12ENC | ADC12SC;

    // // Configure DMA to transfer ADC12 results to FRAM
    // DMACTL0 = DMA0TSEL_24; // ADC12IFGx triggered
    // DMACTL4 = DMARMWDIS; // Read-modify-write disable
    // DMA0CTL = DMADT_4 | DMADSTINCR_3 | DMASRCBYTE | DMADSTBYTE | DMAEN; // Rpt, inc dst
    // DMA0SA = (uint16_t) &ADC12MEM0; // Source block address
    // DMA0DA = (uint16_t) dst; // Destination single address
    // DMA0SZ = 1; // Block size

    

    // Enter LPM3, enable interrupts
    __bis_SR_register(LPM3_bits | GIE);
    __no_operation();
}

// void end_capture()
// {
//     // Disable ADC interrupt
//     ADC12IER0 &= ~ADC12IE0;

//     // Disable timer interrupt
//     TA3CCTL0 &= ~CCIE;
//     TA3CTL = MC__STOP;

//     // Disable mic power
//     BITCLR(PMIC_AMP_OUT, PIN_MIC_AMP_EN);

//     // Reset capture variables
//     dst = (uint8_t *)AUDIO_START_ADDRESS;
//     start_chunk = TRUE;
// }

// #pragma vector = TIMER3_A0_VECTOR
// __interrupt void TIMER3_A0_ISR(void)
// {
//     ADC12CTL0 |= ADC12ENC | ADC12SC;
// }

#pragma vector = ADC12_VECTOR
__interrupt void ADC12_ISR(void)
{
    // // Packs the 12-bit ADC value into memory without gaps
    // if (start_chunk) {
    //     // Beginning of a new 24-bit chunk
    //     // Put 8 most significant bits
    //     *dst = ADC12MEM0 >> 4 & 0xFF;
    //     dst++; // Increment by only 1 byte
    //     // Put 4 least significant bits
    //     *dst = ADC12MEM0 << 4 & 0xF0;
    //     start_chunk = 0;
    // } else {
    //     // Middle of a 24-bit chunk
    //     // Put the 4 most significant bits
    //     *dst |= ADC12MEM0 >> 8 & 0x0F;
    //     dst++; // Increment a byte
    //     // Put the 8 least significant bits
    //     *dst = ADC12MEM0 & 0xFF;
    //     dst++; // Increment another byte
    //     start_chunk = 1;
    // }

    // Encodes the 12-bit ADC value into just 4 using ADPCM compression
    // The encoder expects a 16-bit value, so we shift the 12-bit ADC result
    // uint8_t encoded_4b = ADPCM_Encoder(ADC12MEM0);

    // // Alternates between writing the 4-bit value to the upper and lower nibble
    // if (start_chunk)
    // {
    //     *dst = encoded_4b << 4;
    //     start_chunk = FALSE;
    // }
    // else
    // {
    //     *dst |= encoded_4b;
    //     dst++;
    //     start_chunk = TRUE;
    // }
    // if (__even_in_range(ADC12IV, ADC12IV_ADC_12RDYIFG))
    // {
    //     // Encodes the 12-bit ADC value into just 4 using ADPCM compression
    //     // The encoder expects a 16-bit value, so we shift the 12-bit ADC result
    //     uint8_t encoded_4b = ADPCM_Encoder(ADC12MEM0);

    //     // Alternates between writing the 4-bit value to the upper and lower nibble
    //     if (start_chunk)
    //     {
    //         *dst = encoded_4b << 4;
    //         start_chunk = FALSE;
    //     }
    //     else
    //     {
    //         *dst |= encoded_4b;
    //         dst++;
    //         start_chunk = TRUE;
    //     }

    //     P3OUT ^= BIT0;
    // }
    // ADC12CTL0 |= ADC12ENC;
    
}
